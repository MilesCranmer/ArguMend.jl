var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"@argumend\nextract_close_matches","category":"page"},{"location":"api/#ArguMend.@argumend","page":"API","title":"ArguMend.@argumend","text":"@argumend [funcdef]\n\nThis macro lets you automatically suggest similarly-spelled keywords:\n\n@argumend function f(a, b; niterations=10)\n    a + b - niterations\nend\n\nwhich results in a nicer mechanism for invalid keywords:\n\njulia> f(1, 2; iterations=1)\nERROR: SuggestiveMethodError: in call to `f`, found unsupported keyword argument: `iterations`, perhaps you meant `niterations`\n\nStacktrace:\n [1] f(a::Int64, b::Int64; niterations::Int64, invalid_kws#231::@Kwargs{iterations::Int64})\n   @ Main ~/PermaDocuments/ArguMend.jl/src/ArguMend.jl:69\n [2] top-level scope\n   @ REPL[14]:1\n\nThis function computes closeness between the mistyped keyword argument by counting the maximum number of matching subsequences with all the other keyword arguments.\n\n\n\n\n\n","category":"macro"},{"location":"api/#ArguMend.extract_close_matches","page":"API","title":"ArguMend.extract_close_matches","text":"extract_close_matches(key, candidates; n=3, cutoff=0.6)\n\nFinds and returns up to n close matches from candidates for a given key based on a similarity ratio. The similarity ratio is calculated using the similarity_ratio function, which compares matching subsequences.\n\nArguments\n\nkey: The string or sequence for which close matches are sought.\ncandidates: An array of strings or sequences against which the key is compared.\n\nOptional keywords\n\nn: The maximum number of close matches to return (default is 3).\ncutoff: The minimum similarity ratio required for a candidate to be considered a close match (default is 0.6).\n\nReturns\n\nAn array of up to n candidates that have a similarity ratio above the cutoff.\n\nExamples\n\njulia> mistyped_kw = \"iterations\";\n\njulia> candidate_kws = [\"niterations\", \"ncycles_per_iteration\", \"niterations_per_cycle\", \"abcdef\", \"iter\"];\n\njulia> extract_close_matches(mistyped_kw, candidate_kws)\n[\"niterations\", \"niterations_per_cycle\"]\n\n\n\n\n\n","category":"function"},{"location":"#ArguMend.jl","page":"Home","title":"ArguMend.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Dev) (Image: Build Status) (Image: Coverage) (Image: Aqua QA)","category":"page"},{"location":"","page":"Home","title":"Home","text":"ArguMend.jl injects a function with logic to help with mistyped keyword arguments.","category":"page"},{"location":"","page":"Home","title":"Home","text":"@argumend function f(a, b; niterations=10, kw2=2)\n    a + b - niterations + kw2\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"This results in a nicer mechanism for MethodErrors:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> f(1, 2; iterations=1)\nERROR: SuggestiveMethodError: in call to `f`, found unsupported\n       keyword argument: `iterations`, perhaps you meant `niterations`","category":"page"},{"location":"","page":"Home","title":"Home","text":"This becomes increasingly useful when calling into a large interface with many possible options.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This mechanism has (very likely) zero runtime cost, as it relies on adding splatted keyword arguments to the function call, which will re-compile the function if any keyword arguments change, skipping the ArguMend functions altogether.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The core function used for computing candidate keywords is extract_close_matches, which is a clean-room pure-Julia re-implementation of Python's difflib.getclosematches.","category":"page"},{"location":"#Example","page":"Home","title":"Example","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"I wrote this because SymbolicRegression.jl has a massive number of options, and I wanted the error to tell me or a user what parameter name was mistyped.","category":"page"},{"location":"","page":"Home","title":"Home","text":"<details> <summary> The full list of options is as follows (expand): </summary>","category":"page"},{"location":"","page":"Home","title":"Home","text":"function Options(;\n    binary_operators=[+, -, /, *],\n    unary_operators=[],\n    constraints=nothing,\n    elementwise_loss::Union{Function,Nothing}=nothing,\n    loss_function::Union{Function,Nothing}=nothing,\n    tournament_selection_n::Integer=12,\n    tournament_selection_p::Real=0.86,\n    topn::Integer=12,\n    complexity_of_operators=nothing,\n    complexity_of_constants::Union{Nothing,Real}=nothing,\n    complexity_of_variables::Union{Nothing,Real}=nothing,\n    parsimony::Real=0.0032,\n    dimensional_constraint_penalty::Union{Nothing,Real}=nothing,\n    dimensionless_constants_only::Bool=false,\n    alpha::Real=0.100000,\n    maxsize::Integer=20,\n    maxdepth::Union{Nothing,Integer}=nothing,\n    turbo::Bool=false,\n    bumper::Bool=false,\n    migration::Bool=true,\n    hof_migration::Bool=true,\n    should_simplify::Union{Nothing,Bool}=nothing,\n    should_optimize_constants::Bool=true,\n    output_file::Union{Nothing,AbstractString}=nothing,\n    node_type=nothing,\n    populations::Integer=15,\n    perturbation_factor::Real=0.076,\n    annealing::Bool=false,\n    batching::Bool=false,\n    batch_size::Integer=50,\n    mutation_weights=NamedTuple(),\n    crossover_probability::Real=0.066,\n    warmup_maxsize_by::Real=0.0,\n    use_frequency::Bool=true,\n    use_frequency_in_tournament::Bool=true,\n    adaptive_parsimony_scaling::Real=20.0,\n    population_size::Integer=33,\n    ncycles_per_iteration::Integer=550,\n    fraction_replaced::Real=0.00036,\n    fraction_replaced_hof::Real=0.035,\n    verbosity::Union{Integer,Nothing}=nothing,\n    print_precision::Integer=5,\n    save_to_file::Bool=true,\n    probability_negate_constant::Real=0.01,\n    seed=nothing,\n    bin_constraints=nothing,\n    una_constraints=nothing,\n    progress::Union{Bool,Nothing}=nothing,\n    terminal_width::Union{Nothing,Integer}=nothing,\n    optimizer_algorithm::AbstractString=\"BFGS\",\n    optimizer_nrestarts::Integer=2,\n    optimizer_probability::Real=0.14,\n    optimizer_iterations::Union{Nothing,Integer}=nothing,\n    optimizer_f_calls_limit::Union{Nothing,Integer}=nothing,\n    optimizer_options=NamedTuple(),\n    use_recorder::Bool=false,\n    recorder_file::AbstractString=\"pysr_recorder.json\",\n    early_stop_condition::Union{Function,Real,Nothing}=nothing,\n    timeout_in_seconds::Union{Nothing,Real}=nothing,\n    max_evals::Union{Nothing,Integer}=nothing,\n    skip_mutation_failures::Bool=true,\n    nested_constraints=nothing,\n    deterministic::Bool=false,\n    # Not search options; just construction options:\n    define_helper_functions::Bool=true,\n    deprecated_return_state=nothing,\n)\n    return nothing\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"</details>","category":"page"},{"location":"","page":"Home","title":"Home","text":"If I wrap this call with @argumend, I get much more useful error messages:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> Options(; npopulations=3)\nERROR: SuggestiveMethodError: in call to `Options`, found unsupported keyword argument:\n      `npopulations`, perhaps you meant `populations` or `population_size`","category":"page"},{"location":"","page":"Home","title":"Home","text":"rather than the standard Julia output (scroll to the right):","category":"page"},{"location":"","page":"Home","title":"Home","text":"ERROR: MethodError: no method matching Options(; npopulations::Int64)\n\nClosest candidates are:\n  Options(; binary_operators, unary_operators, constraints, elementwise_loss, loss_function, tournament_selection_n, tournament_selection_p, topn, complexity_of_operators, complexity_of_constants, complexity_of_variables, parsimony, dimensional_constraint_penalty, dimensionless_constants_only, alpha, maxsize, maxdepth, turbo, bumper, migration, hof_migration, should_simplify, should_optimize_constants, output_file, node_type, populations, perturbation_factor, annealing, batching, batch_size, mutation_weights, crossover_probability, warmup_maxsize_by, use_frequency, use_frequency_in_tournament, adaptive_parsimony_scaling, population_size, ncycles_per_iteration, fraction_replaced, fraction_replaced_hof, verbosity, print_precision, save_to_file, probability_negate_constant, seed, bin_constraints, una_constraints, progress, terminal_width, optimizer_algorithm, optimizer_nrestarts, optimizer_probability, optimizer_iterations, optimizer_f_calls_limit, optimizer_options, use_recorder, recorder_file, early_stop_condition, timeout_in_seconds, max_evals, skip_mutation_failures, nested_constraints, deterministic, define_helper_functions, deprecated_return_state) got unsupported keyword argument \"npopulations\"","category":"page"}]
}
