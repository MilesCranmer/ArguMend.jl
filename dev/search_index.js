var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"@argumend\nextract_close_matches","category":"page"},{"location":"api/#ArguMend.@argumend","page":"API","title":"ArguMend.@argumend","text":"@argumend [funcdef]\n\nThis macro lets you automatically suggest similarly-spelled keywords:\n\n@argumend function f(a, b; niterations=10)\n    a + b - niterations\nend\n\nwhich results in a nicer mechanism for invalid keywords:\n\njulia> f(1, 2; iterations=1)\nERROR: SuggestiveMethodError: in call to `f`, found unsupported keyword argument: `iterations`, perhaps you meant `niterations`\n\nStacktrace:\n [1] f(a::Int64, b::Int64; niterations::Int64, invalid_kws#231::@Kwargs{iterations::Int64})\n   @ Main ~/PermaDocuments/ArguMend.jl/src/ArguMend.jl:69\n [2] top-level scope\n   @ REPL[14]:1\n\nThis function computes closeness between the mistyped keyword argument by counting the maximum number of matching subsequences with all the other keyword arguments.\n\n\n\n\n\n","category":"macro"},{"location":"api/#ArguMend.extract_close_matches","page":"API","title":"ArguMend.extract_close_matches","text":"extract_close_matches(key, candidates; n=3, cutoff=0.6)\n\nFinds and returns up to n close matches from candidates for a given key based on a similarity ratio. The similarity ratio is calculated using the similarity_ratio function, which compares matching subsequences.\n\nArguments\n\nkey: The string or sequence for which close matches are sought.\ncandidates: An array of strings or sequences against which the key is compared.\n\nOptional keywords\n\nn: The maximum number of close matches to return (default is 3).\ncutoff: The minimum similarity ratio required for a candidate to be considered a close match (default is 0.6).\n\nReturns\n\nAn array of up to n candidates that have a similarity ratio above the cutoff.\n\nExamples\n\njulia> mistyped_kw = \"iterations\";\n\njulia> candidate_kws = [\"niterations\", \"ncycles_per_iteration\", \"niterations_per_cycle\", \"abcdef\", \"iter\"];\n\njulia> extract_close_matches(mistyped_kw, candidate_kws)\n[\"niterations\", \"niterations_per_cycle\"]\n\n\n\n\n\n","category":"function"},{"location":"#ArguMend.jl","page":"Home","title":"ArguMend.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Dev) (Image: Build Status) (Image: Coverage) (Image: Aqua QA)","category":"page"},{"location":"","page":"Home","title":"Home","text":"ArguMend.jl injects a function with logic to help with mistyped keyword arguments.","category":"page"},{"location":"","page":"Home","title":"Home","text":"@argumend function f(a, b; niterations=10, kw2=2)\n    a + b - niterations + kw2\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"This results in a nicer mechanism for MethodErrors:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> f(1, 2; iterations=1)\nERROR: SuggestiveMethodError: in call to `f`, found unsupported\n       keyword argument: `iterations`, perhaps you meant `niterations`","category":"page"},{"location":"","page":"Home","title":"Home","text":"This becomes increasingly useful when calling into a large interface with many possible options.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This mechanism has zero runtime cost, as it relies on adding splatted keyword arguments to the function call, which will re-compile the function if any keyword arguments change, skipping the ArguMend functions altogether.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The core function used for computing candidate keywords is extract_close_matches, which is a clean-room pure-Julia re-implementation of Python's difflib.getclosematches.","category":"page"}]
}
